{"ast":null,"code":"var _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/App.js\";\n//LIBRARIES\nimport React from 'react';\nimport { Component, Fragment } from 'react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport { connect } from 'react-redux'; //COMPONENTS & VARIABLES\n\nimport './App.css';\nimport { postToArtistCreate } from './actions/sessionActions';\nimport Dashboard from './components/Dashboard';\nimport Subscribe from './components/FanView/Subscribe';\nimport SubscriptionPage from './components/ArtistViews/SubscriptionPage';\nimport Settings from './components/ArtistViews/Settings';\nimport BlastContainer from './components/ArtistViews/Blasts/BlastContainer';\nimport DraftBlast from './components/ArtistViews/DraftBlast';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport { autoLogin } from './actions/sessionActions';\nimport { postToBlastCreate } from './actions/blastActions';\nimport { getBlasts } from './actions/blastActions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      unAuthenticated: false,\n      redirectLink: null\n    };\n\n    this.renderSomething = () => {\n      if (this.props.isAuthenticated) {\n        return React.createElement(Navbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handleRedirectFromTextBlasts = (uniqueKey, route) => {\n      this.props.redirect({\n        key: uniqueKey.replace(/^\\/|\\/$/g, '')\n      }, \"redirect\").then(data => {\n        const url = data.url.replace(/^\\/|\\/$/g, '');\n        window.location.href = \"http://\".concat(url);\n      });\n      return null;\n    };\n\n    this.checkForToken = () => {\n      const token = localStorage.token;\n\n      if (token) {\n        this.props.fetchArtistCreate(autoLogin(token));\n      } else {\n        this.setState({\n          unAuthenticated: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.checkForToken();\n  }\n\n  render() {\n    //TODO: Fix route\n    // console.log(\"CURRENT USER IN APP.JS\", this.props);\n    if (this.props.doneLoading || this.state.unAuthenticated) {\n      if (!this.props.isAuthenticated || !this.props.currentUser) {\n        return React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/\",\n          component: Home,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/:slug\",\n          render: () => React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, this.handleRedirectFromTextBlasts(this.props.location.pathname, \"redirect\")),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/subscribe/:slug\",\n          component: Subscribe,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), React.createElement(Redirect, {\n          to: '/',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, this.renderSomething(), React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(Route, {\n          path: \"/subscribe/edit\",\n          component: SubscriptionPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/settings\",\n          component: Settings,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/blasts/draft\",\n          component: DraftBlast,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/blasts\",\n          component: BlastContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/dashboard\",\n          component: Dashboard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        })));\n      }\n    } else {\n      // show a spinner\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"loading......\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.sessionsReducer.authenticated,\n    currentUser: state.sessionsReducer.currentUser,\n    doneLoading: !state.sessionsReducer.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchArtistCreate: token => dispatch(postToArtistCreate(token, \"auto_login\")),\n    redirect: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route)),\n    getBlasts: (token, route) => dispatch(getBlasts(token, route))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App)); //\n//","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/App.js"],"names":["React","Component","Fragment","Switch","Route","Redirect","withRouter","connect","postToArtistCreate","Dashboard","Subscribe","SubscriptionPage","Settings","BlastContainer","DraftBlast","Navbar","Home","autoLogin","postToBlastCreate","getBlasts","App","state","unAuthenticated","redirectLink","renderSomething","props","isAuthenticated","handleRedirectFromTextBlasts","uniqueKey","route","redirect","key","replace","then","data","url","window","location","href","checkForToken","token","localStorage","fetchArtistCreate","setState","componentDidMount","render","doneLoading","currentUser","pathname","mapStateToProps","sessionsReducer","authenticated","loading","mapDispatchToProps","dispatch","blastContent"],"mappings":"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","sourcesContent":["//LIBRARIES\nimport React from 'react';\nimport {Component, Fragment} from 'react';\nimport {Switch, Route, Redirect, withRouter } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport { connect } from 'react-redux';\n\n//COMPONENTS & VARIABLES\nimport './App.css';\nimport { postToArtistCreate } from './actions/sessionActions'\nimport Dashboard from './components/Dashboard'\nimport Subscribe from './components/FanView/Subscribe'\nimport SubscriptionPage from './components/ArtistViews/SubscriptionPage'\nimport Settings from './components/ArtistViews/Settings'\nimport BlastContainer from './components/ArtistViews/Blasts/BlastContainer'\nimport DraftBlast from './components/ArtistViews/DraftBlast'\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport {autoLogin} from './actions/sessionActions'\nimport { postToBlastCreate } from './actions/blastActions'\nimport { getBlasts } from './actions/blastActions'\n\n\n\n\nclass App extends Component {\n\n  state = { unAuthenticated: false, redirectLink: null }\n\n  componentDidMount(){\n    this.checkForToken()\n  }\n\n  renderSomething = () => {\n    if(this.props.isAuthenticated){\n      return <Navbar />\n    }\n  }\n\n//TODO: handle url formatting\n//TODO: make route accessable when user's are logged in\n  handleRedirectFromTextBlasts = (uniqueKey, route) => {\n    this.props.redirect({ key: uniqueKey.replace(/^\\/|\\/$/g, '') }, \"redirect\")\n    .then(data => {\n      const url = data.url.replace(/^\\/|\\/$/g, '')\n      window.location.href = `http://${url}`\n    })\n    return null\n  }\n\n  checkForToken = () => {\n    const token = localStorage.token\n    if (token) {\n      this.props.fetchArtistCreate(autoLogin(token))\n    } else {\n      this.setState({unAuthenticated: true})\n    }\n  }\n\n  render(){\n    //TODO: Fix route\n    // console.log(\"CURRENT USER IN APP.JS\", this.props);\n    if (this.props.doneLoading || this.state.unAuthenticated) {\n      if(!this.props.isAuthenticated || !this.props.currentUser){\n        return (\n          <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route exact path='/:slug' render={() => (\n            <div>\n              {this.handleRedirectFromTextBlasts(this.props.location.pathname, \"redirect\")}\n            </div>\n          )}/>\n          <Route path='/subscribe/:slug' component={Subscribe}/>\n          <Redirect to={'/'}/>\n          </Switch>\n        )\n      } else {\n        return (\n          <Fragment>\n            {this.renderSomething()}\n            <Switch>\n              <Route path='/subscribe/edit' component={SubscriptionPage}/>\n              <Route path='/settings' component={Settings}/>\n              <Route path='/blasts/draft' component={DraftBlast}/>\n              <Route exact path='/blasts' component={BlastContainer}/>\n              <Route path='/dashboard' component={Dashboard}/>\n            </Switch>\n          </Fragment>\n        );\n      }\n    } else {\n      // show a spinner\n      return <h1>loading......</h1>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.sessionsReducer.authenticated,\n    currentUser: state.sessionsReducer.currentUser,\n    doneLoading: !state.sessionsReducer.loading\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchArtistCreate: (token)=> dispatch(postToArtistCreate(token, \"auto_login\")),\n    redirect: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route)),\n    getBlasts: (token, route) => dispatch(getBlasts(token, route))\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\n//\n//\n"]},"metadata":{},"sourceType":"module"}