{"ast":null,"code":"/****************************************************************\nFETCHES\n****************************************************************/\nexport const postToSubscriptionCreate = credentials => {\n  return dispatch => {\n    dispatch({\n      type: \"SUBSCRIPTION_LOADING\"\n    });\n    return fetch(\"http://localhost:3000/api/v1/subscribe\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    }).then(response => response.json()).then(data => {\n      console.log(\"SUB DATA\", data);\n\n      if (data.error) {\n        dispatch({\n          type: \"SUBSCRIPTION_ERROR\",\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: \"SUBSCRIPTION_SUCCESS\",\n          payload: data\n        });\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n};\nexport const updateSubscriptionProps = props => {\n  return dispatch => {\n    dispatch({\n      type: \"SUBSCRIPTION_LOADING\"\n    });\n    return fetch(\"http://localhost:3000/api/v1/subscribe/update\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    }).then(response => response.json()).then(data => {\n      console.log(\"SUB DATA\", data);\n\n      if (data.error) {\n        dispatch({\n          type: \"SUBSCRIPTION_ERROR\",\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: \"SUBSCRIPTION_SUCCESS\",\n          payload: data\n        });\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n};","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/actions/subscriptionActions.js"],"names":["postToSubscriptionCreate","credentials","dispatch","type","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","error","payload","catch","updateSubscriptionProps","props"],"mappings":"AAEA;;;AAGA,OAAO,MAAMA,wBAAwB,GAAIC,WAAD,IAAiB;AAEvD,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOC,KAAK,2CAA2C;AACrDC,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAF4C;AAMrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,WAAf;AAN+C,KAA3C,CAAL,CAQNS,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;;AACF,UAAIA,IAAI,CAACG,KAAT,EAAe;AACbd,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,oBAAR;AAA8Bc,UAAAA,OAAO,EAAEJ;AAAvC,SAAD,CAAR;AACD,OAFD,MAEO;AACLX,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,sBAAR;AAAgCc,UAAAA,OAAO,EAAEJ;AAAzC,SAAD,CAAR;AACD;AACF,KAhBM,EAkBRK,KAlBQ,CAkBFF,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KApBQ,CAAP;AAqBH,GAvBD;AAwBD,CA1BM;AA4BP,OAAO,MAAMG,uBAAuB,GAAIC,KAAD,IAAW;AAChD,SAAQlB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOC,KAAK,kDAAkD;AAC5DC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFmD;AAM5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,KAAf;AANsD,KAAlD,CAAL,CAQNV,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;;AACF,UAAIA,IAAI,CAACG,KAAT,EAAe;AACbd,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,oBAAR;AAA8Bc,UAAAA,OAAO,EAAEJ;AAAvC,SAAD,CAAR;AACD,OAFD,MAEO;AACLX,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,sBAAR;AAAgCc,UAAAA,OAAO,EAAEJ;AAAzC,SAAD,CAAR;AACD;AACF,KAhBM,EAkBRK,KAlBQ,CAkBFF,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KApBQ,CAAP;AAqBH,GAvBD;AAwBD,CAzBM","sourcesContent":["\n\n/****************************************************************\nFETCHES\n****************************************************************/\nexport const postToSubscriptionCreate = (credentials) => {\n\n  return (dispatch) => {\n      dispatch( { type: \"SUBSCRIPTION_LOADING\" } );\n      return fetch(`http://localhost:3000/api/v1/subscribe`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      })\n      .then(response => response.json())\n        .then(data => {\n          console.log(\"SUB DATA\", data);\n        if (data.error){\n          dispatch({ type: \"SUBSCRIPTION_ERROR\", payload: data })\n        } else {\n          dispatch({ type: \"SUBSCRIPTION_SUCCESS\", payload: data })\n        }\n      }\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n\nexport const updateSubscriptionProps = (props) => {\n  return (dispatch) => {\n      dispatch( { type: \"SUBSCRIPTION_LOADING\" } );\n      return fetch(`http://localhost:3000/api/v1/subscribe/update`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(props)\n      })\n      .then(response => response.json())\n        .then(data => {\n          console.log(\"SUB DATA\", data);\n        if (data.error){\n          dispatch({ type: \"SUBSCRIPTION_ERROR\", payload: data })\n        } else {\n          dispatch({ type: \"SUBSCRIPTION_SUCCESS\", payload: data })\n        }\n      }\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}