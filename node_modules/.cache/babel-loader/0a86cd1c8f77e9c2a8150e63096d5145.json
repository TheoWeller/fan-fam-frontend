{"ast":null,"code":"import _objectSpread from \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/DraftBlast.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { postToBlastCreate } from '../../actions/blastActions'; // import { Button, Checkbox, Form, Input } from 'semantic-ui-react'\n\nimport { Menu, Segment, TextArea, Form, Input, Button, Modal, Header, Icon, Grid } from 'semantic-ui-react';\n\nclass DraftBlast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      blastLabel: \"\",\n      content: \"\",\n      url: \"\",\n      shortenedLink: \"\",\n      shortenedLinkId: \"\",\n      blastConfirmation: false,\n      textBlastSent: false,\n      blastData: {}\n    };\n\n    this.handleFormChange = (fieldInputName, event) => {\n      switch (fieldInputName) {\n        case \"content\":\n          this.setState(_objectSpread({}, this.state, {\n            content: event.target.value\n          }));\n          break;\n\n        case \"url\":\n          this.setState(_objectSpread({}, this.state, {\n            url: event.target.value\n          }));\n          break;\n\n        case \"name\":\n          this.setState(_objectSpread({}, this.state, {\n            blastLabel: event.target.value\n          }));\n          break;\n      }\n    };\n\n    this.handleSubmit = () => {\n      this.props.submitBlast(_objectSpread({}, this.state, {\n        id: this.props.currentUserId\n      }), \"create\").then(data => {\n        this.setState(_objectSpread({}, this.state, {\n          blastId: data.payload.blastId,\n          blastConfirmation: true\n        }));\n      });\n    };\n\n    this.handleShortLinkClick = () => {\n      if (this.state.url === \"\") {\n        return null;\n      } else {\n        this.props.shortenLink({\n          blastLabel: this.state.blastLabel,\n          content: this.state.content,\n          url: this.state.url\n        }, \"shorten\").then(data => {\n          this.setState({\n            blasName: data.blastLabel,\n            content: data.content,\n            url: data.url,\n            shortenedLink: data.shortUrl,\n            shortenedLinkId: data.shortUrlId\n          });\n        }); //end of promise chain\n      } //end of conditional\n\n    };\n\n    this.handleModuleClick = action => {\n      switch (action) {\n        case \"send\":\n          this.props.submitBlast(_objectSpread({}, this.state, {\n            artistId: this.props.currentUserId\n          }), \"send\").then(data => {\n            if (data.deliveryStatus == \"Success\") {\n              this.setState(_objectSpread({}, this.state, {\n                blastConfirmation: true,\n                textBlastSent: true,\n                blastData: data.smsStatus\n              }));\n            } else if (data.deliveryStatus == \"Error\") {\n              this.setState(_objectSpread({}, this.state, {\n                blastConfirmation: true,\n                textBlastSent: true,\n                blastData: \"Error: No messages delivered\"\n              }));\n            }\n          });\n          break;\n\n        case \"cancel\":\n          this.setState(_objectSpread({}, this.state, {\n            blastConfirmation: false\n          }));\n          break;\n      }\n    };\n\n    this.renderBlastDeliveryStatus = () => {\n      if (this.state.textBlastSent && this.state.blastData !== \"Error: No messages delivered\") {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.state.blastData.successful, \" of \", this.state.blastData.successful + this.state.blastData.failed, \" messages were successfully delivered.\");\n      } else {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, this.state.blastData);\n      }\n    };\n\n    this.renderSendBlastHeader = () => {\n      return !this.state.textBlastSent ? React.createElement(Header, {\n        textAlign: \"center\",\n        content: \"Send Blast?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }) : null;\n    };\n\n    this.renderSuccessfulBlastContent = () => {\n      if (this.state.textBlastSent) {\n        return React.createElement(Modal.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, this.renderBlastDeliveryStatus());\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(Modal.Actions, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"red\",\n          onClick: () => this.handleModuleClick(\"cancel\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"remove\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), \" No\"), React.createElement(Button, {\n          onClick: () => this.handleModuleClick(\"send\"),\n          color: \"green\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"checkmark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), \" Yes\")));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"draft-blast-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      textAlign: \"center\",\n      id: \"blast-draft-segment-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 1,\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Input, {\n      value: this.state.name,\n      placeholder: \"Blast label\",\n      onChange: event => this.handleFormChange(\"name\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      value: this.state.content,\n      id: \"blast-content\",\n      placeholder: \"Blast content\",\n      onChange: event => this.handleFormChange(\"content\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Input, {\n      value: this.state.url,\n      placeholder: \"Blast url\",\n      onChange: event => this.handleFormChange(\"url\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: this.handleShortLinkClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Shorten Link\"), React.createElement(Input, {\n      value: this.state.shortenedLink,\n      placeholder: \"Shortened url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(Grid.Row, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Send Blast\"))), React.createElement(Modal, {\n      open: this.state.blastConfirmation,\n      basic: true,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.renderSendBlastHeader(), React.createElement(Segment, {\n      basic: true,\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.renderSuccessfulBlastContent())))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitBlast: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route)),\n    shortenLink: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route)),\n    sendblast: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUserId: state.sessionsReducer.currentUser.id\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DraftBlast);","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/DraftBlast.js"],"names":["React","Component","Fragment","connect","postToBlastCreate","Menu","Segment","TextArea","Form","Input","Button","Modal","Header","Icon","Grid","DraftBlast","state","blastLabel","content","url","shortenedLink","shortenedLinkId","blastConfirmation","textBlastSent","blastData","handleFormChange","fieldInputName","event","setState","target","value","handleSubmit","props","submitBlast","id","currentUserId","then","data","blastId","payload","handleShortLinkClick","shortenLink","blasName","shortUrl","shortUrlId","handleModuleClick","action","artistId","deliveryStatus","smsStatus","renderBlastDeliveryStatus","successful","failed","renderSendBlastHeader","renderSuccessfulBlastContent","render","name","mapDispatchToProps","dispatch","blastContent","route","sendblast","mapStateToProps","sessionsReducer","currentUser"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport { connect } from 'react-redux';\nimport { postToBlastCreate } from '../../actions/blastActions'\n// import { Button, Checkbox, Form, Input } from 'semantic-ui-react'\nimport { Menu, Segment, TextArea, Form, Input, Button, Modal, Header, Icon, Grid} from 'semantic-ui-react'\n\nclass DraftBlast extends Component {\n  state = {blastLabel: \"\", content: \"\", url: \"\", shortenedLink: \"\", shortenedLinkId: \"\", blastConfirmation: false, textBlastSent: false, blastData: {}}\n\n\n  handleFormChange = (fieldInputName, event) => {\n    switch(fieldInputName){\n      case \"content\":\n        this.setState( {...this.state, content: event.target.value} )\n      break;\n      case \"url\":\n        this.setState( {...this.state, url: event.target.value} )\n      break;\n      case \"name\":\n        this.setState({...this.state, blastLabel: event.target.value})\n      break;\n    }\n  }\n\n  handleSubmit = () => {\n    this.props.submitBlast({\n      ...this.state,\n      id: this.props.currentUserId\n    }, \"create\")\n    .then(data => {\n      this.setState({\n        ...this.state,\n        blastId: data.payload.blastId,\n        blastConfirmation: true\n      })\n    })\n  }\n\n//TODO: Validate link before shortening\n  handleShortLinkClick = () => {\n    if(this.state.url === \"\"){\n      return null\n    } else {\n      this.props.shortenLink({\n        blastLabel: this.state.blastLabel,\n        content: this.state.content,\n        url: this.state.url\n      }, \"shorten\")\n      .then(data => {\n        this.setState({\n          blasName: data.blastLabel,\n          content: data.content,\n          url: data.url,\n          shortenedLink: data.shortUrl,\n          shortenedLinkId: data.shortUrlId\n        })\n      })//end of promise chain\n    }//end of conditional\n  }\n\n  handleModuleClick = (action) => {\n    switch(action) {\n      case \"send\":\n        this.props.submitBlast({\n          ...this.state,\n          artistId: this.props.currentUserId\n        }, \"send\")\n        .then(data => {\n          if(data.deliveryStatus == \"Success\"){\n            this.setState( { ...this.state, blastConfirmation: true, textBlastSent: true, blastData: data.smsStatus } )\n          } else if(data.deliveryStatus == \"Error\") {\n            this.setState( { ...this.state, blastConfirmation: true, textBlastSent: true, blastData: \"Error: No messages delivered\" } )\n          }\n        })\n      break;\n      case \"cancel\":\n        this.setState({...this.state, blastConfirmation: false})\n      break;\n    }\n  }\n\n  renderBlastDeliveryStatus = () => {\n    if(this.state.textBlastSent && this.state.blastData !== \"Error: No messages delivered\"){\n      return <h3>{this.state.blastData.successful} of {this.state.blastData.successful + this.state.blastData.failed} messages were successfully delivered.</h3>\n    } else {\n      return <h3>{this.state.blastData}</h3>\n    }\n  }\n\n  renderSendBlastHeader = () => {\n    return !this.state.textBlastSent ? <Header textAlign=\"center\" content='Send Blast?' /> : null\n  }\n\n  renderSuccessfulBlastContent = () => {\n    if(this.state.textBlastSent){\n      return (\n        <Modal.Content>\n          {this.renderBlastDeliveryStatus()}\n        </Modal.Content>\n      )\n    } else {\n      return (\n        <Fragment>\n            <Modal.Actions >\n              <Button  color='red' onClick={() => this.handleModuleClick(\"cancel\")}>\n                <Icon name='remove' /> No\n              </Button>\n              <Button onClick={() => this.handleModuleClick(\"send\")} color='green'>\n                <Icon name='checkmark' /> Yes\n              </Button>\n            </Modal.Actions>\n        </Fragment>\n      )\n    }\n  }\n\n  render(){\n    return (\n      <div id=\"draft-blast-container\">\n        <Segment textAlign='center' id=\"blast-draft-segment-container\">\n          <Grid columns={1} centered>\n            <Form onSubmit={this.handleSubmit}>\n              <Grid.Row centered>\n                <Input\n                value={this.state.name}\n                placeholder='Blast label'\n                onChange={(event) => this.handleFormChange(\"name\", event)}\n                />\n              </Grid.Row>\n              <br/>\n              <Grid.Row centered>\n                <TextArea\n                  value={this.state.content}\n                  id=\"blast-content\"\n                  placeholder='Blast content'\n                  onChange={(event) => this.handleFormChange(\"content\", event)}\n                />\n              </Grid.Row>\n              <br/>\n              <br/>\n              <br/>\n              <Grid.Row centered>\n                <Input\n                value={this.state.url}\n                placeholder='Blast url'\n                onChange={(event) => this.handleFormChange(\"url\", event)}\n                />\n                <Button type=\"button\" onClick={this.handleShortLinkClick}>Shorten Link</Button>\n                <Input\n                value={this.state.shortenedLink}\n                placeholder='Shortened url'\n                />\n                <br/>\n              </Grid.Row>\n              <br/>\n              <br/>\n              <br/>\n              <Grid.Row centered>\n                <Button type='submit'>Send Blast</Button>\n              </Grid.Row>\n            </Form>\n\n            <Modal open={this.state.blastConfirmation} basic size='small'>\n              {this.renderSendBlastHeader()}\n              <Segment basic textAlign=\"center\">\n              {this.renderSuccessfulBlastContent()}\n              </Segment>\n            </Modal>\n          </Grid>\n        </Segment>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitBlast: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route)),\n    shortenLink: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route)),\n    sendblast: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route))\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {currentUserId: state.sessionsReducer.currentUser.id}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DraftBlast)\n"]},"metadata":{},"sourceType":"module"}