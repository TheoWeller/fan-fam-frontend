{"ast":null,"code":"var _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/App.js\";\nimport React from 'react';\nimport { Component, Fragment } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { postToArtistCreate } from './actions/sessionActions';\nimport ArtistSignup from './components/ArtistSignup';\nimport Dashboard from './components/Dashboard';\nimport Login from './components/Login';\nimport Subscribe from './components/FanView/Subscribe';\nimport SubscriptionPage from './components/ArtistViews/SubscriptionPage';\nimport Settings from './components/ArtistViews/Settings';\nimport Blasts from './components/ArtistViews/Blasts';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport { LOGIN, autoLogin } from './actions/sessionActions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      unAuthenticated: false\n    };\n\n    this.renderSomething = () => {\n      if (this.props.isAuthenticated) {\n        return React.createElement(Navbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handleRedirectFromTextBlasts = (uniqueKey, route) => {\n      debugger;\n      this.props.redirect({}, \"redirect\");\n    };\n\n    this.checkForToken = () => {\n      const token = localStorage.token;\n\n      if (token) {\n        this.props.fetchArtistCreate(autoLogin(token));\n      } else {\n        this.setState({\n          unAuthenticated: true\n        });\n      }\n    };\n\n    this.slugParams = ({\n      match\n    }) => {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"SUCCESS\");\n    };\n  }\n\n  componentDidMount() {\n    this.checkForToken();\n  }\n\n  render() {\n    // console.log(\"APP PROPS\", this.props);\n    console.log(\"CURRENT USER IN APP.JS\", this.props);\n\n    if (this.props.doneLoading || this.state.unAuthenticated) {\n      if (!this.props.isAuthenticated || !this.props.currentUser) {\n        return React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/\",\n          component: Home,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/:slug\",\n          component: () => this.handleRedirectFromTextBlasts(this.props, \"redirect\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/subscribe/:slug\",\n          component: Subscribe,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), React.createElement(Redirect, {\n          to: '/',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, this.renderSomething(), React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Route, {\n          path: \"/dashboard\",\n          component: Dashboard,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/subscribe/edit\",\n          component: SubscriptionPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/settings\",\n          component: Settings,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }), React.createElement(Route, {\n          path: \"/blasts\",\n          component: Blasts,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        })));\n      }\n    } else {\n      // show a spinner\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"loading......\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.sessionsReducer.authenticated,\n    currentUser: state.sessionsReducer.currentUser,\n    // isAuthenticated: state.sessionsReducer.currentUser.id,\n    doneLoading: !state.sessionsReducer.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchArtistCreate: token => dispatch(postToArtistCreate(token, \"auto_login\")),\n    redirect: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/App.js"],"names":["React","Component","Fragment","Button","Switch","Route","Redirect","withRouter","connect","postToArtistCreate","ArtistSignup","Dashboard","Login","Subscribe","SubscriptionPage","Settings","Blasts","Navbar","Home","LOGIN","autoLogin","App","state","unAuthenticated","renderSomething","props","isAuthenticated","handleRedirectFromTextBlasts","uniqueKey","route","redirect","checkForToken","token","localStorage","fetchArtistCreate","setState","slugParams","match","componentDidMount","render","console","log","doneLoading","currentUser","mapStateToProps","sessionsReducer","authenticated","loading","mapDispatchToProps","dispatch","blastContent","postToBlastCreate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,UAAjC,QAAmD,kBAAnD;AACA,OAAO,kCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,WAAP;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,0BAA/B;;AAEA,MAAMC,GAAN,SAAkBpB,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BqB,KAF0B,GAElB;AAACC,MAAAA,eAAe,EAAE;AAAlB,KAFkB;;AAAA,SAQ1BC,eAR0B,GAQR,MAAM;AACtB,UAAG,KAAKC,KAAL,CAAWC,eAAd,EAA8B;AAC5B,eAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAZyB;;AAAA,SAc1BC,4BAd0B,GAcK,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACnD;AACA,WAAKJ,KAAL,CAAWK,QAAX,CAAoB,EAApB,EAAwB,UAAxB;AACD,KAjByB;;AAAA,SAmB1BC,aAnB0B,GAmBV,MAAM;AACpB,YAAMC,KAAK,GAAGC,YAAY,CAACD,KAA3B;;AAEA,UAAIA,KAAJ,EAAW;AACT,aAAKP,KAAL,CAAWS,iBAAX,CAA6Bd,SAAS,CAACY,KAAD,CAAtC;AACD,OAFD,MAEO;AACL,aAAKG,QAAL,CAAc;AAACZ,UAAAA,eAAe,EAAE;AAAlB,SAAd;AACD;AAEF,KA5ByB;;AAAA,SA8B1Ba,UA9B0B,GA8Bb,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAa;AACxB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,KAhCyB;AAAA;;AAI1BC,EAAAA,iBAAiB,GAAE;AACjB,SAAKP,aAAL;AACD;;AA6BDQ,EAAAA,MAAM,GAAE;AACN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,KAAKhB,KAA3C;;AACA,QAAI,KAAKA,KAAL,CAAWiB,WAAX,IAA0B,KAAKpB,KAAL,CAAWC,eAAzC,EAA0D;AACxD,UAAG,CAAC,KAAKE,KAAL,CAAWC,eAAZ,IAA+B,CAAC,KAAKD,KAAL,CAAWkB,WAA9C,EAA0D;AACxD,eACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAEzB,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAEA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,SAAS,EAAE,MAAM,KAAKS,4BAAL,CAAkC,KAAKF,KAAvC,EAA8C,UAA9C,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA,EAGA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,kBAAZ;AAA+B,UAAA,SAAS,EAAEZ,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA,EAIA,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,CADF;AAQD,OATD,MASO;AACL,eACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,KAAKW,eAAL,EADD,EAEA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,YAAZ;AAAyB,UAAA,SAAS,EAAEb,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAEA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,iBAAZ;AAA8B,UAAA,SAAS,EAAEG,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA,EAGA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAwB,UAAA,SAAS,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA,EAIA,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAsB,UAAA,SAAS,EAAEC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJA,CAFA,CADF;AAWD;AACF,KAvBD,MAuBO;AACL;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AACD;AACF;;AAjEyB;;AAoE5B,MAAM4B,eAAe,GAAItB,KAAD,IAAW;AACjC,SAAO;AACLI,IAAAA,eAAe,EAAEJ,KAAK,CAACuB,eAAN,CAAsBC,aADlC;AAELH,IAAAA,WAAW,EAAErB,KAAK,CAACuB,eAAN,CAAsBF,WAF9B;AAGL;AACAD,IAAAA,WAAW,EAAE,CAACpB,KAAK,CAACuB,eAAN,CAAsBE;AAJ/B,GAAP;AAMD,CAPD;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLf,IAAAA,iBAAiB,EAAGF,KAAD,IAAUiB,QAAQ,CAACxC,kBAAkB,CAACuB,KAAD,EAAQ,YAAR,CAAnB,CADhC;AAELF,IAAAA,QAAQ,EAAE,CAACoB,YAAD,EAAerB,KAAf,KAAwBoB,QAAQ,CAACE,iBAAiB,CAACD,YAAD,EAAerB,KAAf,CAAlB;AAFrC,GAAP;AAID,CALD;;AAOA,eAAetB,UAAU,CAACC,OAAO,CAACoC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C3B,GAA7C,CAAD,CAAzB","sourcesContent":["import React from 'react';\nimport {Component, Fragment} from 'react';\nimport { Button } from 'semantic-ui-react'\nimport {Switch, Route, Redirect, withRouter } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport { postToArtistCreate } from './actions/sessionActions'\nimport ArtistSignup from './components/ArtistSignup'\nimport Dashboard from './components/Dashboard'\nimport Login from './components/Login'\nimport Subscribe from './components/FanView/Subscribe'\nimport SubscriptionPage from './components/ArtistViews/SubscriptionPage'\nimport Settings from './components/ArtistViews/Settings'\nimport Blasts from './components/ArtistViews/Blasts'\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport {LOGIN, autoLogin} from './actions/sessionActions'\n\nclass App extends Component {\n\n  state = {unAuthenticated: false}\n\n  componentDidMount(){\n    this.checkForToken()\n  }\n\n  renderSomething = () => {\n    if(this.props.isAuthenticated){\n      return <Navbar />\n    }\n  }\n\n  handleRedirectFromTextBlasts = (uniqueKey, route) => {\n    debugger\n    this.props.redirect({}, \"redirect\")\n  }\n\n  checkForToken = () => {\n    const token = localStorage.token\n\n    if (token) {\n      this.props.fetchArtistCreate(autoLogin(token))\n    } else {\n      this.setState({unAuthenticated: true})\n    }\n\n  }\n\n  slugParams = ({match}) => {\n    return <h1>SUCCESS</h1>\n  }\n\n\n  render(){\n    // console.log(\"APP PROPS\", this.props);\n    console.log(\"CURRENT USER IN APP.JS\", this.props);\n    if (this.props.doneLoading || this.state.unAuthenticated) {\n      if(!this.props.isAuthenticated || !this.props.currentUser){\n        return (\n          <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/:slug' component={() => this.handleRedirectFromTextBlasts(this.props, \"redirect\")}/>\n          <Route path='/subscribe/:slug' component={Subscribe}/>\n          <Redirect to={'/'}/>\n          </Switch>\n        )\n      } else {\n        return (\n          <Fragment>\n          {this.renderSomething()}\n          <Switch>\n          <Route path='/dashboard' component={Dashboard}/>\n          <Route path='/subscribe/edit' component={SubscriptionPage}/>\n          <Route path='/settings' component={Settings}/>\n          <Route path='/blasts' component={Blasts}/>\n          </Switch>\n          </Fragment>\n        );\n      }\n    } else {\n      // show a spinner\n      return <h1>loading......</h1>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthenticated: state.sessionsReducer.authenticated,\n    currentUser: state.sessionsReducer.currentUser,\n    // isAuthenticated: state.sessionsReducer.currentUser.id,\n    doneLoading: !state.sessionsReducer.loading\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchArtistCreate: (token)=> dispatch(postToArtistCreate(token, \"auto_login\")),\n    redirect: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route))\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\n"]},"metadata":{},"sourceType":"module"}