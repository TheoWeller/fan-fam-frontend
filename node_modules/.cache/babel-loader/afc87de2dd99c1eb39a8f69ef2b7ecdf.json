{"ast":null,"code":"export { setSubscriptionSuccess, setSubscriptionFail };\n\nconst setSubscriptionSuccess = payload => {\n  return {\n    type: SUBSCRIPTION_SUCCESS,\n    payload\n  };\n};\n\nconst setSubscriptionFail = payload => {\n  return {\n    type: SUBSCRIPTION_FAILED,\n    payload\n  };\n};\n/****************************************************************\nFETCHES\n****************************************************************/\n\n\nexport const postToSubscriptionCreate = credentials => {\n  return dispatch => {\n    dispatch({\n      type: \"SUBSCRIPTION_LOADING\"\n    });\n    return fetch(\"http://localhost:3000/api/v1/subscribe\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    }).then(response => response.json()).then(data => {\n      console.log(\"SUB DATA\", data);\n\n      if (data.error) {\n        dispatch({\n          type: \"SUBSCRIPTION_ERROR\",\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: \"SUBSCRIPTION_SUCCESS\",\n          payload: data\n        });\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n};\nexport const updateSubscriptionProps = props => {\n  return dispatch => {\n    dispatch({\n      type: \"SUBSCRIPTION_LOADING\"\n    });\n    return fetch(\"http://localhost:3000/api/v1/subscribe/update\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(props)\n    }).then(response => response.json()).then(data => {\n      console.log(\"SUB DATA\", data);\n\n      if (data.error) {\n        dispatch({\n          type: \"SUBSCRIPTION_ERROR\",\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: \"SUBSCRIPTION_SUCCESS\",\n          payload: data\n        });\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n};","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/actions/subscriptionActions.js"],"names":["setSubscriptionSuccess","setSubscriptionFail","payload","type","SUBSCRIPTION_SUCCESS","SUBSCRIPTION_FAILED","postToSubscriptionCreate","credentials","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","error","catch","updateSubscriptionProps","props"],"mappings":"AAAA,SAAQA,sBAAR,EAAgCC,mBAAhC;;AAEA,MAAMD,sBAAsB,GAAIE,OAAD,IAAa;AAC1C,SAAO;AAACC,IAAAA,IAAI,EAAEC,oBAAP;AAA6BF,IAAAA;AAA7B,GAAP;AACD,CAFD;;AAIA,MAAMD,mBAAmB,GAAIC,OAAD,IAAa;AACvC,SAAO;AAACC,IAAAA,IAAI,EAAEE,mBAAP;AAA4BH,IAAAA;AAA5B,GAAP;AACD,CAFD;AAKA;;;;;AAGA,OAAO,MAAMI,wBAAwB,GAAIC,WAAD,IAAiB;AAEvD,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAE;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOM,KAAK,2CAA2C;AACrDC,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAF4C;AAMrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AAN+C,KAA3C,CAAL,CAQNQ,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;;AACF,UAAIA,IAAI,CAACG,KAAT,EAAe;AACbb,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,oBAAR;AAA8BD,UAAAA,OAAO,EAAEgB;AAAvC,SAAD,CAAR;AACD,OAFD,MAEO;AACLV,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,sBAAR;AAAgCD,UAAAA,OAAO,EAAEgB;AAAzC,SAAD,CAAR;AACD;AACF,KAhBM,EAkBRI,KAlBQ,CAkBFD,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KApBQ,CAAP;AAqBH,GAvBD;AAwBD,CA1BM;AA6BP,OAAO,MAAME,uBAAuB,GAAIC,KAAD,IAAW;AAChD,SAAQhB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAE;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOM,KAAK,kDAAkD;AAC5DC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFmD;AAM5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeU,KAAf;AANsD,KAAlD,CAAL,CAQNT,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;;AACF,UAAIA,IAAI,CAACG,KAAT,EAAe;AACbb,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,oBAAR;AAA8BD,UAAAA,OAAO,EAAEgB;AAAvC,SAAD,CAAR;AACD,OAFD,MAEO;AACLV,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,sBAAR;AAAgCD,UAAAA,OAAO,EAAEgB;AAAzC,SAAD,CAAR;AACD;AACF,KAhBM,EAkBRI,KAlBQ,CAkBFD,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KApBQ,CAAP;AAqBH,GAvBD;AAwBD,CAzBM","sourcesContent":["export {setSubscriptionSuccess, setSubscriptionFail }\n\nconst setSubscriptionSuccess = (payload) => {\n  return {type: SUBSCRIPTION_SUCCESS, payload}\n}\n\nconst setSubscriptionFail = (payload) => {\n  return {type: SUBSCRIPTION_FAILED, payload}\n}\n\n\n/****************************************************************\nFETCHES\n****************************************************************/\nexport const postToSubscriptionCreate = (credentials) => {\n\n  return (dispatch) => {\n      dispatch( { type: \"SUBSCRIPTION_LOADING\" } );\n      return fetch(`http://localhost:3000/api/v1/subscribe`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      })\n      .then(response => response.json())\n        .then(data => {\n          console.log(\"SUB DATA\", data);\n        if (data.error){\n          dispatch({ type: \"SUBSCRIPTION_ERROR\", payload: data })\n        } else {\n          dispatch({ type: \"SUBSCRIPTION_SUCCESS\", payload: data })\n        }\n      }\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n\n\nexport const updateSubscriptionProps = (props) => {\n  return (dispatch) => {\n      dispatch( { type: \"SUBSCRIPTION_LOADING\" } );\n      return fetch(`http://localhost:3000/api/v1/subscribe/update`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(props)\n      })\n      .then(response => response.json())\n        .then(data => {\n          console.log(\"SUB DATA\", data);\n        if (data.error){\n          dispatch({ type: \"SUBSCRIPTION_ERROR\", payload: data })\n        } else {\n          dispatch({ type: \"SUBSCRIPTION_SUCCESS\", payload: data })\n        }\n      }\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}