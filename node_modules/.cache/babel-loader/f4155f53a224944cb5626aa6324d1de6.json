{"ast":null,"code":"import _objectSpread from \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/Blasts.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { postToBlastCreate } from '../../actions/blastActions'; // import { Button, Checkbox, Form, Input } from 'semantic-ui-react'\n\nimport { Menu, Segment, TextArea, Form, Input, Button, Modal, Header, Icon } from 'semantic-ui-react';\n\nclass Blasts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      content: \"\",\n      url: \"\",\n      shortenedLink: \"\",\n      shortenedLinkId: \"\",\n      blastConfirmation: false,\n      textBlastSent: false,\n      blastData: {}\n    };\n\n    this.handleFormChange = (fieldInputName, event) => {\n      switch (fieldInputName) {\n        case \"content\":\n          this.setState(_objectSpread({}, this.state, {\n            content: event.target.value\n          }));\n          break;\n\n        case \"url\":\n          this.setState(_objectSpread({}, this.state, {\n            url: event.target.value\n          }));\n          break;\n      }\n    };\n\n    this.handleSubmit = () => {\n      this.props.submitBlast(_objectSpread({}, this.state, {\n        id: this.props.currentUserId\n      }), \"create\").then(data => {\n        this.setState(_objectSpread({}, this.state, {\n          blastId: data.payload.blastId,\n          blastConfirmation: true\n        }));\n      });\n    };\n\n    this.handleShortLinkClick = () => {\n      this.props.shortenLink({\n        content: this.state.content,\n        url: this.state.url\n      }, \"shorten\").then(data => {\n        this.setState({\n          content: data.content,\n          url: data.url,\n          shortenedLink: data.shortUrl,\n          shortenedLinkId: data.shortUrlId\n        });\n      });\n    };\n\n    this.handleModuleClick = action => {\n      switch (action) {\n        case \"send\":\n          this.props.submitBlast(_objectSpread({}, this.state, {\n            artistId: this.props.currentUserId\n          }), \"send\").then(data => {\n            if (data.deliveryStatus == \"Success\") {\n              this.setState(_objectSpread({}, this.state, {\n                blastConfirmation: true,\n                textBlastSent: true,\n                blastData: data.smsStatus\n              }));\n            } else if (data.deliveryStatus == \"Error\") {\n              this.setState(_objectSpread({}, this.state, {\n                blastConfirmation: true,\n                textBlastSent: true,\n                blastData: \"Error: No messages delivered\"\n              }));\n            }\n          });\n          break;\n\n        case \"cancel\":\n          this.setState(_objectSpread({}, this.state, {\n            blastConfirmation: false\n          }));\n          break;\n      }\n    };\n\n    this.renderBlastDeliveryStatus = () => {\n      if (this.state.textBlastSent && this.state.blastData !== \"Error: No messages delivered\") {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, this.state.blastData.successful, \" of \", this.state.blastData.successful + this.state.blastData.failed, \" messages were successfully delivered.\");\n      } else {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, this.state.blastData);\n      }\n    };\n\n    this.renderSendBlastHeader = () => {\n      return !this.state.textBlastSent ? React.createElement(Header, {\n        textAlign: \"center\",\n        content: \"Send Blast?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }) : null;\n    };\n\n    this.renderSuccessfulBlastContent = () => {\n      if (this.state.textBlastSent) {\n        return React.createElement(Modal.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, this.renderBlastDeliveryStatus());\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(Modal.Actions, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"red\",\n          onClick: () => this.handleModuleClick(\"cancel\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"remove\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }), \" No\"), React.createElement(Button, {\n          onClick: () => this.handleModuleClick(\"send\"),\n          color: \"green\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"checkmark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }), \" Yes\")));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      value: this.state.content,\n      id: \"blast-content\",\n      placeholder: \"Text blast content\",\n      onChange: event => this.handleFormChange(\"content\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(Input, {\n      value: this.state.url,\n      placeholder: \"Text blast url\",\n      onChange: event => this.handleFormChange(\"url\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      onClick: this.handleShortLinkClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Shorten Link\"), React.createElement(Input, {\n      value: this.state.shortenedLink,\n      placeholder: \"Shortened url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Send Blast\")), React.createElement(Modal, {\n      open: this.state.blastConfirmation,\n      basic: true,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.renderSendBlastHeader(), React.createElement(Segment, {\n      basic: true,\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.renderSuccessfulBlastContent())));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitBlast: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route)),\n    shortenLink: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route)),\n    sendblast: (blastContent, route) => dispatch(postToBlastCreate(blastContent, route))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUserId: state.sessionsReducer.currentUser.id\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Blasts);","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/Blasts.js"],"names":["React","Component","Fragment","connect","postToBlastCreate","Menu","Segment","TextArea","Form","Input","Button","Modal","Header","Icon","Blasts","state","content","url","shortenedLink","shortenedLinkId","blastConfirmation","textBlastSent","blastData","handleFormChange","fieldInputName","event","setState","target","value","handleSubmit","props","submitBlast","id","currentUserId","then","data","blastId","payload","handleShortLinkClick","shortenLink","shortUrl","shortUrlId","handleModuleClick","action","artistId","deliveryStatus","smsStatus","renderBlastDeliveryStatus","successful","failed","renderSendBlastHeader","renderSuccessfulBlastContent","render","mapDispatchToProps","dispatch","blastContent","route","sendblast","mapStateToProps","sessionsReducer","currentUser"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport { connect } from 'react-redux';\nimport { postToBlastCreate } from '../../actions/blastActions'\n// import { Button, Checkbox, Form, Input } from 'semantic-ui-react'\nimport { Menu, Segment, TextArea, Form, Input, Button, Modal, Header, Icon } from 'semantic-ui-react'\n\nclass Blasts extends Component {\n  state = {content: \"\", url: \"\", shortenedLink: \"\", shortenedLinkId: \"\", blastConfirmation: false, textBlastSent: false, blastData: {}}\n\n\n  handleFormChange = (fieldInputName, event) => {\n    switch(fieldInputName){\n      case \"content\":\n        this.setState( {...this.state, content: event.target.value} )\n      break;\n      case \"url\":\n        this.setState( {...this.state, url: event.target.value} )\n      break;\n    }\n  }\n\n  handleSubmit = () => {\n    this.props.submitBlast({\n      ...this.state,\n      id: this.props.currentUserId\n    }, \"create\")\n    .then(data => {\n      this.setState({\n        ...this.state,\n        blastId: data.payload.blastId,\n        blastConfirmation: true\n      })\n    })\n  }\n\n\n  handleShortLinkClick = () => {\n    this.props.shortenLink({\n      content: this.state.content,\n      url: this.state.url\n    }, \"shorten\")\n    .then(data => {\n      this.setState({\n        content: data.content,\n        url: data.url,\n        shortenedLink: data.shortUrl,\n        shortenedLinkId: data.shortUrlId\n      })\n    })\n\n  }\n\n\n\n  handleModuleClick = (action) => {\n    switch(action) {\n      case \"send\":\n        this.props.submitBlast({\n          ...this.state,\n          artistId: this.props.currentUserId\n    }, \"send\")\n    .then(data => {\n      if(data.deliveryStatus == \"Success\"){\n        this.setState( { ...this.state, blastConfirmation: true, textBlastSent: true, blastData: data.smsStatus } )\n      } else if(data.deliveryStatus == \"Error\") {\n        this.setState( { ...this.state, blastConfirmation: true, textBlastSent: true, blastData: \"Error: No messages delivered\" } )\n      }\n    })\n    break;\n    case \"cancel\":\n      this.setState({...this.state, blastConfirmation: false})\n    break;\n  }\n  }\n\n  renderBlastDeliveryStatus = () => {\n    if(this.state.textBlastSent && this.state.blastData !== \"Error: No messages delivered\"){\n      return <h3>{this.state.blastData.successful} of {this.state.blastData.successful + this.state.blastData.failed} messages were successfully delivered.</h3>\n    } else {\n      return <h3>{this.state.blastData}</h3>\n    }\n  }\n\n  renderSendBlastHeader = () => {\n    return !this.state.textBlastSent ? <Header textAlign=\"center\" content='Send Blast?' /> : null\n  }\n\n\n\n  renderSuccessfulBlastContent = () => {\n    if(this.state.textBlastSent){\n      return (\n        <Modal.Content>\n          {this.renderBlastDeliveryStatus()}\n        </Modal.Content>\n      )\n    } else {\n      return (\n        <Fragment>\n\n            <Modal.Actions >\n              <Button  color='red' onClick={() => this.handleModuleClick(\"cancel\")}>\n                <Icon name='remove' /> No\n              </Button>\n              <Button onClick={() => this.handleModuleClick(\"send\")} color='green'>\n                <Icon name='checkmark' /> Yes\n              </Button>\n            </Modal.Actions>\n        </Fragment>\n      )\n    }\n  }\n\n\n\n\n  render(){\n    return (\n      <Fragment>\n        <Form onSubmit={this.handleSubmit}>\n          <TextArea\n            value={this.state.content}\n            id=\"blast-content\"\n            placeholder='Text blast content'\n            onChange={(event) => this.handleFormChange(\"content\", event)}\n          />\n          <Input\n          value={this.state.url}\n          placeholder='Text blast url'\n          onChange={(event) => this.handleFormChange(\"url\", event)}\n          />\n          <Button type=\"button\" onClick={this.handleShortLinkClick}>Shorten Link</Button>\n          <Input\n          value={this.state.shortenedLink}\n          placeholder='Shortened url'\n          />\n          <br/>\n          <Button type='submit'>Send Blast</Button>\n        </Form>\n\n        <Modal open={this.state.blastConfirmation} basic size='small'>\n          {this.renderSendBlastHeader()}\n          <Segment basic textAlign=\"center\">\n          {this.renderSuccessfulBlastContent()}\n          </Segment>\n        </Modal>\n      </Fragment>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitBlast: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route)),\n    shortenLink: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route)),\n    sendblast: (blastContent, route)=> dispatch(postToBlastCreate(blastContent, route))\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {currentUserId: state.sessionsReducer.currentUser.id}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Blasts)\n"]},"metadata":{},"sourceType":"module"}