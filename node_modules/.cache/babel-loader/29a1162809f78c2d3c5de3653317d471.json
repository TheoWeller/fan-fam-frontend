{"ast":null,"code":"import _objectSpread from \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Input } from 'semantic-ui-react';\nimport { LOGIN, login } from '../actions/sessionActions';\nimport { postToArtistCreate } from '../actions/sessionActions';\nimport { withRouter } from 'react-router';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n\n    this.handleFormChange = (fieldInputName, event) => {\n      switch (fieldInputName) {\n        case \"email\":\n          this.setState(_objectSpread({}, this.state, {\n            email: event.target.value\n          }));\n          break;\n\n        case \"password\":\n          this.setState(_objectSpread({}, this.state, {\n            password: event.target.value\n          }));\n          break;\n      }\n    };\n\n    this.dispatchLogin = () => {\n      this.props.fetchArtistCreate(login(this.state.email, this.state.password)).then(data => {\n        if (data.errors) {\n          alert('please enter the right info');\n        } else {\n          this.props.history.push('dashboard');\n        }\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.dispatchLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Input, {\n      transparent: true,\n      icon: \"mail outline\",\n      iconPosition: \"left\",\n      size: \"large\",\n      placeholder: \"Email\",\n      value: this.state.email,\n      name: \"email\",\n      onChange: event => this.handleFormChange(\"email\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Input, {\n      transparent: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      size: \"large\",\n      placeholder: \"Password\",\n      type: \"password\",\n      value: this.state.password,\n      name: \"password\",\n      onChange: event => this.handleFormChange(\"password\", event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Login\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchArtistCreate: newArtist => dispatch(postToArtistCreate(newArtist, \"login\"))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Login));","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/Login.js"],"names":["React","Component","connect","Button","Form","Input","LOGIN","login","postToArtistCreate","withRouter","Login","state","email","password","handleFormChange","fieldInputName","event","setState","target","value","dispatchLogin","props","fetchArtistCreate","then","data","errors","alert","history","push","render","mapDispatchToProps","dispatch","newArtist"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Input } from 'semantic-ui-react'\nimport {LOGIN, login} from '../actions/sessionActions'\nimport { postToArtistCreate } from '../actions/sessionActions'\nimport {withRouter} from 'react-router'\n\nclass Login extends Component {\n\n  state = {email: \"\", password: \"\"}\n\n  handleFormChange = (fieldInputName, event) => {\n    switch(fieldInputName){\n      case \"email\":\n        this.setState( {...this.state, email: event.target.value} )\n      break;\n      case \"password\":\n        this.setState( {...this.state, password: event.target.value} )\n      break;\n    }\n  }\n\n\n  dispatchLogin = () => {\n    this.props.fetchArtistCreate(login(this.state.email, this.state.password))\n      .then(data => {\n        if (data.errors) {\n          alert('please enter the right info')\n        } else {\n          this.props.history.push('dashboard')\n        }\n      })\n  }\n\n\n  render (){\n    return (\n      <div>\n        <Form onSubmit={this.dispatchLogin} >\n          <Form.Field>\n            <Input transparent\n            icon='mail outline'\n            iconPosition='left'\n            size='large'\n            placeholder='Email'\n            value={this.state.email}\n            name=\"email\"\n            onChange={(event) => this.handleFormChange(\"email\", event)}\n          />\n          </Form.Field>\n          <Form.Field>\n            <Input transparent\n            icon='lock'\n            iconPosition='left'\n            size='large'\n            placeholder='Password'\n            type=\"password\"\n            value={this.state.password}\n            name=\"password\"\n            onChange={(event) => this.handleFormChange(\"password\", event)}\n          />\n          </Form.Field>\n          <Button type='submit'>Login</Button>\n        </Form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {fetchArtistCreate: (newArtist)=> dispatch(postToArtistCreate(newArtist, \"login\"))}\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(Login))\n"]},"metadata":{},"sourceType":"module"}