{"ast":null,"code":"export { login, autoLogin, signUp, logout, LOGOUT, LOGIN, LOGIN_SUCCESS };\nconst SET_LOGIN_PENDING = 'SET_LOGIN_PENDING';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst SIGNUP = 'SIGNUP';\n\nconst login = (email, password) => {\n  return {\n    type: LOGIN,\n    email,\n    password\n  };\n};\n\nconst autoLogin = token => {\n  return {\n    type: LOGIN,\n    payload: token\n  };\n};\n\nconst logout = () => {\n  return {\n    type: LOGOUT,\n    payload: {}\n  };\n};\n\nconst signUp = (email, username, password, phone) => {\n  return {\n    type: SIGNUP,\n    email,\n    username,\n    password,\n    phone\n  };\n};\n\nconst setLoginPending = isLoginPending => {\n  return {\n    type: SET_LOGIN_PENDING,\n    isLoginPending\n  };\n};\n\nconst setLoginSuccess = isLoginSuccess => {\n  return {\n    type: LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n};\n/****************************************************************\nFETCHES\n****************************************************************/\n\n\nexport const postToArtistCreate = (credentials, loginOrSignup) => {\n  return dispatch => {\n    dispatch({\n      type: \"LOADING\"\n    });\n    return fetch(\"http://localhost:3000/api/v1/artist/\".concat(loginOrSignup), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    }).then(response => response.json()).then(data => {\n      debugger;\n\n      if (data.error) {\n        dispatch({\n          type: \"ERROR\",\n          payload: data\n        });\n      } else {\n        console.log(\"BACK2DATA\", data);\n        localStorage.setItem(\"token\", data.token);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      }\n\n      return data;\n    }).catch(error => {\n      return error;\n    });\n  };\n};","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/actions/sessionActions.js"],"names":["login","autoLogin","signUp","logout","LOGOUT","LOGIN","LOGIN_SUCCESS","SET_LOGIN_PENDING","SET_LOGIN_ERROR","SIGNUP","email","password","type","token","payload","username","phone","setLoginPending","isLoginPending","setLoginSuccess","isLoginSuccess","postToArtistCreate","credentials","loginOrSignup","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","data","error","console","log","localStorage","setItem","catch"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,MAA3C,EAAmDC,KAAnD,EAA0DC,aAA1D;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMD,aAAa,GAAG,eAAtB;AACA,MAAME,eAAe,GAAG,iBAAxB;AACA,MAAMH,KAAK,GAAG,OAAd;AACA,MAAMD,MAAM,GAAG,QAAf;AACA,MAAMK,MAAM,GAAG,QAAf;;AAEA,MAAMT,KAAK,GAAG,CAACU,KAAD,EAAQC,QAAR,KAAqB;AACjC,SAAO;AAACC,IAAAA,IAAI,EAAEP,KAAP;AAAcK,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACD,CAFD;;AAIA,MAAMV,SAAS,GAAIY,KAAD,IAAW;AAC3B,SAAO;AAACD,IAAAA,IAAI,EAAEP,KAAP;AAAcS,IAAAA,OAAO,EAAED;AAAvB,GAAP;AACD,CAFD;;AAIA,MAAMV,MAAM,GAAG,MAAM;AACnB,SAAO;AAACS,IAAAA,IAAI,EAAER,MAAP;AAAeU,IAAAA,OAAO,EAAE;AAAxB,GAAP;AACD,CAFD;;AAIA,MAAMZ,MAAM,GAAG,CAACQ,KAAD,EAAQK,QAAR,EAAkBJ,QAAlB,EAA4BK,KAA5B,KAAsC;AACnD,SAAO;AAACJ,IAAAA,IAAI,EAAEH,MAAP;AAAeC,IAAAA,KAAf;AAAsBK,IAAAA,QAAtB;AAAgCJ,IAAAA,QAAhC;AAA0CK,IAAAA;AAA1C,GAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AAC1C,SAAO;AAACN,IAAAA,IAAI,EAAEL,iBAAP;AAA0BW,IAAAA;AAA1B,GAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AAC1C,SAAO;AAACR,IAAAA,IAAI,EAAEN,aAAP;AAAsBc,IAAAA;AAAtB,GAAP;AACD,CAFD;AAIA;;;;;AAGA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,WAAD,EAAcC,aAAd,KAAgC;AAChE,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAE;AAAEZ,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOa,KAAK,+CAAwCF,aAAxC,GAAyD;AACnEG,MAAAA,MAAM,EAAE,MAD2D;AAEnEC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAF0D;AAMnEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,WAAf;AAN6D,KAAzD,CAAL,CAQNS,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACZ;;AACF,UAAIA,IAAI,CAACC,KAAT,EAAe;AACbX,QAAAA,QAAQ,CAAC;AAAEZ,UAAAA,IAAI,EAAE,OAAR;AAAiBE,UAAAA,OAAO,EAAEoB;AAA1B,SAAD,CAAR;AACD,OAFD,MAEO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,IAAzB;AACAI,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACrB,KAAnC;AACAW,QAAAA,QAAQ,CAAC;AAAEZ,UAAAA,IAAI,EAAEN,aAAR;AAAuBQ,UAAAA,OAAO,EAAEoB;AAAhC,SAAD,CAAR;AACD;;AACD,aAAOA,IAAP;AACD,KAnBM,EAsBNM,KAtBM,CAsBAL,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KAxBM,CAAP;AAyBD,GA3BD;AA4BD,CA7BM","sourcesContent":["export { login, autoLogin, signUp, logout, LOGOUT, LOGIN, LOGIN_SUCCESS};\n\nconst SET_LOGIN_PENDING = 'SET_LOGIN_PENDING';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\nconst LOGIN = 'LOGIN'\nconst LOGOUT = 'LOGOUT'\nconst SIGNUP = 'SIGNUP'\n\nconst login = (email, password) => {\n  return {type: LOGIN, email, password}\n}\n\nconst autoLogin = (token) => {\n  return {type: LOGIN, payload: token}\n}\n\nconst logout = () => {\n  return {type: LOGOUT, payload: {}}\n}\n\nconst signUp = (email, username, password, phone) => {\n  return {type: SIGNUP, email, username, password, phone}\n}\n\nconst setLoginPending = (isLoginPending) => {\n  return {type: SET_LOGIN_PENDING, isLoginPending}\n}\n\nconst setLoginSuccess = (isLoginSuccess) => {\n  return {type: LOGIN_SUCCESS, isLoginSuccess}\n}\n\n/****************************************************************\nFETCHES\n****************************************************************/\nexport const postToArtistCreate = (credentials, loginOrSignup) => {\n  return (dispatch) => {\n    dispatch( { type: \"LOADING\" } );\n    return fetch(`http://localhost:3000/api/v1/artist/${loginOrSignup}`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    })\n    .then(response => response.json())\n      .then(data => {\n        debugger\n      if (data.error){\n        dispatch({ type: \"ERROR\", payload: data })\n      } else {\n        console.log(\"BACK2DATA\", data);\n        localStorage.setItem(\"token\", data.token)\n        dispatch({ type: LOGIN_SUCCESS, payload: data })\n      }\n      return data\n    }\n\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}