{"ast":null,"code":"import _objectSpread from \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/Settings.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Input } from 'semantic-ui-react'; // import { Menu, Segment } from 'semantic-ui-react'\n\nimport { postToArtistCreate } from '../../actions/sessionActions';\n\nclass Settings extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      phone: \"\",\n      newPassword: \"\"\n    };\n\n    this.handleFormChange = (fieldInputName, event) => {\n      switch (fieldInputName) {\n        case \"email\":\n          this.setState(_objectSpread({}, this.state, {\n            email: event.target.value\n          }));\n          break;\n\n        case \"username\":\n          this.setState(_objectSpread({}, this.state, {\n            username: event.target.value\n          }));\n          break;\n\n        case \"password\":\n          this.setState(_objectSpread({}, this.state, {\n            password: event.target.value\n          }));\n          break;\n\n        case \"new-password\":\n          this.setState(_objectSpread({}, this.state, {\n            newPassword: event.target.value\n          }));\n          break;\n\n        case \"phone\":\n          this.setState(_objectSpread({}, this.state, {\n            phone: event.target.value\n          }));\n          break;\n      }\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const newArtist = {\n        email: this.state.email,\n        username: this.state.username,\n        password: this.state.password,\n        phone: this.state.phone\n      };\n      this.props.update(newArtist);\n      this.setState({\n        email: \"\",\n        username: \"\",\n        password: \"\",\n        phone: \"\"\n      });\n    };\n\n    this.userSettingsForm = () => {\n      // console.log(\"STATE\", this.state);\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Input, {\n        transparent: true,\n        icon: \"mail outline\",\n        iconPosition: \"left\",\n        size: \"huge\",\n        transparent: true,\n        placeholder: \"Email\",\n        value: this.state.email,\n        name: \"email\",\n        onChange: event => this.handleFormChange(\"email\", event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Input, {\n        fluid: true,\n        transparent: true,\n        iconPosition: \"left\",\n        icon: \"user outline\",\n        size: \"huge\",\n        placeholder: \"Username\",\n        value: this.state.username,\n        name: \"username\",\n        onChange: event => this.handleFormChange(\"username\", event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Input, {\n        transparent: true,\n        iconPosition: \"left\",\n        icon: \"lock\",\n        size: \"huge\",\n        placeholder: \"Password\",\n        type: \"password\",\n        value: this.state.password,\n        name: \"password\",\n        onChange: event => this.handleFormChange(\"password\", event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Input, {\n        transparent: true,\n        iconPosition: \"left\",\n        icon: \"lock\",\n        size: \"huge\",\n        placeholder: \"New Password\",\n        type: \"password\",\n        value: this.state.Newpassword,\n        name: \"password\",\n        onChange: event => this.handleFormChange(\"new-password\", event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Input, {\n        transparent: true,\n        iconPosition: \"left\",\n        icon: \"phone\",\n        size: \"huge\",\n        placeholder: \"Phone\",\n        value: this.state.phone,\n        name: \"phone\",\n        onChange: event => this.handleFormChange(\"phone\", event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Submit\"));\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/api/v1/artist/settings', {\n      headers: {\n        token: this.props.currentUserToken\n      }\n    }).then(r => r.json()).then(data => {\n      this.setState(_objectSpread({}, this.state, {\n        email: data.email,\n        phone: data.phone,\n        username: data.username\n      }));\n    });\n  }\n\n  render() {\n    return this.userSettingsForm();\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    update: newArtist => dispatch(postToArtistCreate(newArtist, \"update\")),\n    getArtistData: newArtist => dispatch(postToArtistCreate(newArtist, \"setttings\"))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUserToken: state.sessionsReducer.currentUser.token\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/components/ArtistViews/Settings.js"],"names":["React","Component","Fragment","connect","Button","Form","Input","postToArtistCreate","Settings","state","email","username","password","phone","newPassword","handleFormChange","fieldInputName","event","setState","target","value","handleSubmit","preventDefault","newArtist","props","update","userSettingsForm","Newpassword","componentDidMount","fetch","headers","token","currentUserToken","then","r","json","data","render","mapDispatchToProps","dispatch","getArtistData","mapStateToProps","sessionsReducer","currentUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,mBAApC,C,CACA;;AACA,SAASC,kBAAT,QAAmC,8BAAnC;;AAEA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BQ,KAD+B,GACvB;AAACC,MAAAA,KAAK,EAAE,EAAR;AAAYC,MAAAA,QAAQ,EAAE,EAAtB;AAA0BC,MAAAA,QAAQ,EAAE,EAApC;AAAwCC,MAAAA,KAAK,EAAE,EAA/C;AAAmDC,MAAAA,WAAW,EAAE;AAAhE,KADuB;;AAAA,SAqB/BC,gBArB+B,GAqBZ,CAACC,cAAD,EAAiBC,KAAjB,KAA2B;AAC5C,cAAOD,cAAP;AACE,aAAK,OAAL;AACA,eAAKE,QAAL,mBAAmB,KAAKT,KAAxB;AAA+BC,YAAAA,KAAK,EAAEO,KAAK,CAACE,MAAN,CAAaC;AAAnD;AACA;;AACA,aAAK,UAAL;AACA,eAAKF,QAAL,mBAAmB,KAAKT,KAAxB;AAA+BE,YAAAA,QAAQ,EAAEM,KAAK,CAACE,MAAN,CAAaC;AAAtD;AACA;;AACA,aAAK,UAAL;AACA,eAAKF,QAAL,mBAAmB,KAAKT,KAAxB;AAA+BG,YAAAA,QAAQ,EAAEK,KAAK,CAACE,MAAN,CAAaC;AAAtD;AACA;;AACA,aAAK,cAAL;AACA,eAAKF,QAAL,mBAAmB,KAAKT,KAAxB;AAA+BK,YAAAA,WAAW,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAAzD;AACA;;AACA,aAAK,OAAL;AACA,eAAKF,QAAL,mBAAmB,KAAKT,KAAxB;AAA+BI,YAAAA,KAAK,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAAnD;AACA;AAfF;AAiBD,KAvC8B;;AAAA,SAyC/BC,YAzC+B,GAyCfJ,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACK,cAAN;AACA,YAAMC,SAAS,GAAG;AAChBb,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KADF;AAEhBC,QAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QAFL;AAGhBC,QAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAHL;AAIhBC,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWI;AAJF,OAAlB;AAMA,WAAKW,KAAL,CAAWC,MAAX,CAAkBF,SAAlB;AACA,WAAKL,QAAL,CAAc;AAACR,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,QAAQ,EAAE,EAAtB;AAA0BC,QAAAA,QAAQ,EAAE,EAApC;AAAwCC,QAAAA,KAAK,EAAE;AAA/C,OAAd;AACD,KAnD8B;;AAAA,SAqD/Ba,gBArD+B,GAqDZ,MAAM;AACvB;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKL,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,WAAW,MAAlB;AAAmB,QAAA,IAAI,EAAC,cAAxB;AAAuC,QAAA,YAAY,EAAC,MAApD;AAA2D,QAAA,IAAI,EAAC,MAAhE;AAAuE,QAAA,WAAW,MAAlF;AAAmF,QAAA,WAAW,EAAC,OAA/F;AAAuG,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWC,KAAzH;AAAgI,QAAA,IAAI,EAAC,OAArI;AAA6I,QAAA,QAAQ,EAAGO,KAAD,IAAW,KAAKF,gBAAL,CAAsB,OAAtB,EAA+BE,KAA/B,CAAlK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADE,EAIF,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,WAAW,MAAxB;AAAyB,QAAA,YAAY,EAAC,MAAtC;AAA6C,QAAA,IAAI,EAAC,cAAlD;AAAiE,QAAA,IAAI,EAAC,MAAtE;AAA6E,QAAA,WAAW,EAAC,UAAzF;AAAoG,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWE,QAAtH;AAAgI,QAAA,IAAI,EAAC,UAArI;AAAgJ,QAAA,QAAQ,EAAGM,KAAD,IAAW,KAAKF,gBAAL,CAAsB,UAAtB,EAAkCE,KAAlC,CAArK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJE,EAOF,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,WAAW,MAAlB;AAAmB,QAAA,YAAY,EAAC,MAAhC;AAAuC,QAAA,IAAI,EAAC,MAA5C;AAAmD,QAAA,IAAI,EAAC,MAAxD;AAA+D,QAAA,WAAW,EAAC,UAA3E;AAAsF,QAAA,IAAI,EAAC,UAA3F;AAAsG,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWG,QAAxH;AAAkI,QAAA,IAAI,EAAC,UAAvI;AAAmJ,QAAA,QAAQ,EAAGK,KAAD,IAAW,KAAKF,gBAAL,CAAsB,UAAtB,EAAkCE,KAAlC,CAAxK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAPE,EAUF,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,WAAW,MAAlB;AAAmB,QAAA,YAAY,EAAC,MAAhC;AAAuC,QAAA,IAAI,EAAC,MAA5C;AAAmD,QAAA,IAAI,EAAC,MAAxD;AAA+D,QAAA,WAAW,EAAC,cAA3E;AAA0F,QAAA,IAAI,EAAC,UAA/F;AAA0G,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWkB,WAA5H;AAAyI,QAAA,IAAI,EAAC,UAA9I;AAA0J,QAAA,QAAQ,EAAGV,KAAD,IAAW,KAAKF,gBAAL,CAAsB,cAAtB,EAAsCE,KAAtC,CAA/K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAVE,EAaF,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,WAAW,MAAlB;AAAmB,QAAA,YAAY,EAAC,MAAhC;AAAuC,QAAA,IAAI,EAAC,OAA5C;AAAoD,QAAA,IAAI,EAAC,MAAzD;AAAgE,QAAA,WAAW,EAAC,OAA5E;AAAoF,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWI,KAAtG;AAA6G,QAAA,IAAI,EAAC,OAAlH;AAA0H,QAAA,QAAQ,EAAGI,KAAD,IAAW,KAAKF,gBAAL,CAAsB,OAAtB,EAA+BE,KAA/B,CAA/I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAbE,EAgBF,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBE,CADF;AAoBD,KA3E8B;AAAA;;AAG/BW,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,KAAK,CAAC,8CAAD,EAAiD;AACpDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWQ;AADX;AAD2C,KAAjD,CAAL,CAKCC,IALD,CAKMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EALX,EAMCF,IAND,CAMMG,IAAI,IAAI;AACZ,WAAKlB,QAAL,mBACK,KAAKT,KADV;AAEEC,QAAAA,KAAK,EAAE0B,IAAI,CAAC1B,KAFd;AAGEG,QAAAA,KAAK,EAAEuB,IAAI,CAACvB,KAHd;AAIEF,QAAAA,QAAQ,EAAEyB,IAAI,CAACzB;AAJjB;AAMD,KAbD;AAcD;;AA2DD0B,EAAAA,MAAM,GAAE;AACN,WACE,KAAKX,gBAAL,EADF;AAGD;;AAjF8B;;AAoFjC,MAAMY,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLd,IAAAA,MAAM,EAAGF,SAAD,IAAcgB,QAAQ,CAAChC,kBAAkB,CAACgB,SAAD,EAAY,QAAZ,CAAnB,CADzB;AAELiB,IAAAA,aAAa,EAAGjB,SAAD,IAAcgB,QAAQ,CAAChC,kBAAkB,CAACgB,SAAD,EAAY,WAAZ,CAAnB;AAFhC,GAAP;AAID,CALD;;AAOA,MAAMkB,eAAe,GAAIhC,KAAD,IAAW;AACjC,SAAO;AAACuB,IAAAA,gBAAgB,EAAEvB,KAAK,CAACiC,eAAN,CAAsBC,WAAtB,CAAkCZ;AAArD,GAAP;AACD,CAFD;;AAIA,eAAe5B,OAAO,CAACsC,eAAD,EAAkBH,kBAAlB,CAAP,CAA6C9B,QAA7C,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Input } from 'semantic-ui-react'\n// import { Menu, Segment } from 'semantic-ui-react'\nimport { postToArtistCreate } from '../../actions/sessionActions'\n\nclass Settings extends Component {\n  state = {email: \"\", username: \"\", password: \"\", phone: \"\", newPassword: \"\"}\n\n  componentDidMount(){\n    fetch('http://localhost:3000/api/v1/artist/settings', {\n      headers: {\n        token: this.props.currentUserToken\n      }\n    })\n    .then(r => r.json())\n    .then(data => {\n      this.setState({\n        ...this.state,\n        email: data.email,\n        phone: data.phone,\n        username: data.username\n      })\n    })\n  }\n\n\n  handleFormChange = (fieldInputName, event) => {\n    switch(fieldInputName){\n      case \"email\":\n      this.setState( {...this.state, email: event.target.value} )\n      break;\n      case \"username\":\n      this.setState( {...this.state, username: event.target.value} )\n      break;\n      case \"password\":\n      this.setState( {...this.state, password: event.target.value} )\n      break;\n      case \"new-password\":\n      this.setState( {...this.state, newPassword: event.target.value} )\n      break;\n      case \"phone\":\n      this.setState( {...this.state, phone: event.target.value} )\n      break;\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    const newArtist = {\n      email: this.state.email,\n      username: this.state.username,\n      password: this.state.password,\n      phone: this.state.phone\n    }\n    this.props.update(newArtist)\n    this.setState({email: \"\", username: \"\", password: \"\", phone: \"\"})\n  }\n\n  userSettingsForm = () => {\n    // console.log(\"STATE\", this.state);\n    return (\n      <Form onSubmit={this.handleSubmit}>\n    <Form.Field>\n      <Input transparent icon='mail outline' iconPosition='left' size='huge' transparent placeholder='Email' value={this.state.email} name=\"email\" onChange={(event) => this.handleFormChange(\"email\", event)}/>\n    </Form.Field>\n    <Form.Field>\n      <Input fluid transparent iconPosition='left' icon='user outline' size='huge' placeholder='Username' value={this.state.username} name=\"username\" onChange={(event) => this.handleFormChange(\"username\", event)}/>\n    </Form.Field>\n    <Form.Field>\n      <Input transparent iconPosition='left' icon='lock' size='huge' placeholder='Password' type=\"password\" value={this.state.password} name=\"password\"  onChange={(event) => this.handleFormChange(\"password\", event)}/>\n    </Form.Field>\n    <Form.Field>\n      <Input transparent iconPosition='left' icon='lock' size='huge' placeholder='New Password' type=\"password\" value={this.state.Newpassword} name=\"password\"  onChange={(event) => this.handleFormChange(\"new-password\", event)}/>\n    </Form.Field>\n    <Form.Field>\n      <Input transparent iconPosition='left' icon='phone' size='huge' placeholder='Phone' value={this.state.phone} name=\"phone\" onChange={(event) => this.handleFormChange(\"phone\", event)}/>\n    </Form.Field>\n    <Button type='submit'>Submit</Button>\n  </Form>\n    )\n  }\n\n  render(){\n    return (\n      this.userSettingsForm()\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    update: (newArtist)=> dispatch(postToArtistCreate(newArtist, \"update\")),\n    getArtistData: (newArtist)=> dispatch(postToArtistCreate(newArtist, \"setttings\"))\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {currentUserToken: state.sessionsReducer.currentUser.token}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)\n"]},"metadata":{},"sourceType":"module"}