{"ast":null,"code":"export { login, signUp, LOGIN_SUCCESS };\nconst SET_LOGIN_PENDING = 'SET_LOGIN_PENDING';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\nconst SIGNUP = 'SIGNUP';\n\nconst login = (email, password) => {\n  return {\n    type: LOGIN,\n    email,\n    password\n  };\n};\n\nconst logout = () => {\n  return {\n    type: LOGOUT,\n    payload: {}\n  };\n};\n\nconst signUp = (email, username, password, phone) => {\n  return {\n    type: SIGNUP,\n    email,\n    username,\n    password,\n    phone\n  };\n};\n\nconst setLoginPending = isLoginPending => {\n  return {\n    type: SET_LOGIN_PENDING,\n    isLoginPending\n  };\n};\n\nconst setLoginSuccess = isLoginSuccess => {\n  return {\n    type: LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n};\n/****************************************************************\nFETCHES\n****************************************************************/\n\n\nexport const postToArtistCreate = credentials => {\n  console.log(\"HIT REDUCER\");\n  return dispatch => {\n    dispatch({\n      type: \"PENDING_CREATE\"\n    });\n    return fetch('http://localhost:3000/api/v1/artist-signup', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    }).then(response => response.json()).then(data => {\n      if (data.error) {\n        dispatch({\n          type: \"ERROR\",\n          payload: data\n        });\n      } else {\n        localStorage.setItem(\"token\", data.token);\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: data\n        });\n      }\n    }).catch(error => {\n      return error;\n    });\n  };\n};","map":{"version":3,"sources":["/Users/theoweller/Documents/dev/Flatiron/module-5/final-project/fan-fam2/frontend/fan-fam-frontend/src/actions/sessionActions.js"],"names":["login","signUp","LOGIN_SUCCESS","SET_LOGIN_PENDING","SET_LOGIN_ERROR","LOGIN","LOGOUT","SIGNUP","email","password","type","logout","payload","username","phone","setLoginPending","isLoginPending","setLoginSuccess","isLoginSuccess","postToArtistCreate","credentials","console","log","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","data","error","localStorage","setItem","token","catch"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,aAAxB;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMD,aAAa,GAAG,eAAtB;AACA,MAAME,eAAe,GAAG,iBAAxB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;;AAEA,MAAMP,KAAK,GAAG,CAACQ,KAAD,EAAQC,QAAR,KAAqB;AACjC,SAAO;AAACC,IAAAA,IAAI,EAAEL,KAAP;AAAcG,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,GAAP;AACD,CAFD;;AAIA,MAAME,MAAM,GAAG,MAAM;AACnB,SAAO;AAACD,IAAAA,IAAI,EAAEJ,MAAP;AAAeM,IAAAA,OAAO,EAAE;AAAxB,GAAP;AACD,CAFD;;AAIA,MAAMX,MAAM,GAAG,CAACO,KAAD,EAAQK,QAAR,EAAkBJ,QAAlB,EAA4BK,KAA5B,KAAsC;AACnD,SAAO;AAACJ,IAAAA,IAAI,EAAEH,MAAP;AAAeC,IAAAA,KAAf;AAAsBK,IAAAA,QAAtB;AAAgCJ,IAAAA,QAAhC;AAA0CK,IAAAA;AAA1C,GAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AAC1C,SAAO;AAACN,IAAAA,IAAI,EAAEP,iBAAP;AAA0Ba,IAAAA;AAA1B,GAAP;AACD,CAFD;;AAIA,MAAMC,eAAe,GAAIC,cAAD,IAAoB;AAC1C,SAAO;AAACR,IAAAA,IAAI,EAAER,aAAP;AAAsBgB,IAAAA;AAAtB,GAAP;AACD,CAFD;AAIA;;;;;AAGA,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,IAAiB;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAE;AAAEb,MAAAA,IAAI,EAAE;AAAR,KAAF,CAAR;AACA,WAAOc,KAAK,CAAC,4CAAD,EAA+C;AACzDC,MAAAA,MAAM,EAAE,MADiD;AAEzDC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFgD;AAMzDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,WAAf;AANmD,KAA/C,CAAL,CAQNU,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARX,EASJF,IATI,CASCG,IAAI,IAAI;AACd,UAAIA,IAAI,CAACC,KAAT,EAAe;AACbX,QAAAA,QAAQ,CAAC;AAAEb,UAAAA,IAAI,EAAE,OAAR;AAAiBE,UAAAA,OAAO,EAAEqB;AAA1B,SAAD,CAAR;AACD,OAFD,MAEO;AACLE,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,KAAnC;AACAd,QAAAA,QAAQ,CAAC;AAAEb,UAAAA,IAAI,EAAER,aAAR;AAAuBU,UAAAA,OAAO,EAAEqB;AAAhC,SAAD,CAAR;AACD;AACF,KAhBM,EAmBNK,KAnBM,CAmBAJ,KAAK,IAAI;AACd,aAAOA,KAAP;AACD,KArBM,CAAP;AAsBD,GAxBD;AAyBD,CA3BM","sourcesContent":["export { login, signUp, LOGIN_SUCCESS};\n\nconst SET_LOGIN_PENDING = 'SET_LOGIN_PENDING';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\nconst LOGIN = 'LOGIN'\nconst LOGOUT = 'LOGOUT'\nconst SIGNUP = 'SIGNUP'\n\nconst login = (email, password) => {\n  return {type: LOGIN, email, password}\n}\n\nconst logout = () => {\n  return {type: LOGOUT, payload: {}}\n}\n\nconst signUp = (email, username, password, phone) => {\n  return {type: SIGNUP, email, username, password, phone}\n}\n\nconst setLoginPending = (isLoginPending) => {\n  return {type: SET_LOGIN_PENDING, isLoginPending}\n}\n\nconst setLoginSuccess = (isLoginSuccess) => {\n  return {type: LOGIN_SUCCESS, isLoginSuccess}\n}\n\n/****************************************************************\nFETCHES\n****************************************************************/\nexport const postToArtistCreate = (credentials) => {\n  console.log(\"HIT REDUCER\")\n  return (dispatch) => {\n    dispatch( { type: \"PENDING_CREATE\" } );\n    return fetch('http://localhost:3000/api/v1/artist-signup', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    })\n    .then(response => response.json())\n      .then(data => {\n      if (data.error){\n        dispatch({ type: \"ERROR\", payload: data })\n      } else {\n        localStorage.setItem(\"token\", data.token)\n        dispatch({ type: LOGIN_SUCCESS, payload: data })\n      }\n    }\n\n    )\n    .catch(error => {\n      return error;\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}